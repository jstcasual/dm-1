1.版本號
-git version

2.寫入使用者資訊
- git config --global user.name xxx
- git config --global user.email xxx@ccc.com

3.檢視設定資訊
- git config --list

4.將目錄新增版本控管
- git init

5.檔案狀態
-U (Untrack) 未被控管

6.控管狀態
- status

7.加入控管
- git add <filename>
	- . (所有確認)
	- U (Untrack) ->A (added)已加入

8.看編碼boject內容
- git cat file -p 內容 sha-1 xxxxxx(前六碼 目錄+檔案名稱)
- git cat file -t 型態 sha-1 xxxxxx

9.檢視暫存區的檔案
- git ls-files -s

10.將暫存區資料儲存到倉庫
- git commit -m "第一次提交" 
- 修改上一次的commit
	- git commit --amend

11.提交後產生兩個object
	- commit(sha-1)
		- tree(sha-1)
			- files

12.檢視提交的commit
	- git log --oneline (單行檢視)

13.控管檔案修改後
	- M(modify)

14.使vim編輯器
	- git commit
		- i(進行編輯模式，開始編輯)
		- esc鍵
			- 使用:wq(寫入並離開)
15.預設為Master分支
	-HEAD 永遠會指向分支最新的commit object

16.手動刪除檔案
	- 恢復：git restore .(回復全部 or 指定名稱)
	- 確認：git add

17.自動刪除檔案
	- git rm -f <filename>
	- 恢復：git restore --staged <file> 
		-手動刪除檔案

18.將檔案移出暫存倉庫
	- git rm --cached <filename>
		- 檔案轉換成功 U 模式

19.檢視目前分支
	- git branch <branch name>
		- 新增  
	- git branch -D <branch name>
		- 刪除分支 
	- git branch -m < old > < new >
	
20.切換分支
	- git checkout <branch name>
	- git checkout -b <branch name>
		- 新增分支跟切換

21.合併分支
	- git merge <branch-name>
		- 需切換到其他分支
	
	- git merge --abort
		-取消合併

	- 衝突合併(需確認已誰為主)

			
22.切換commit
	- git checkout commit-object
	- 回到過去的修正
		- git checkout -b dev2
		- git add .
		- git commit

		- 進行20.合併分支

23.回到過去的commit
	- git reset commit-object
	- git reset --hard commit-object


24.顯示所有的歷程
	- git reflog

25.修改恢復

1.git checkout .

2.git reset --hard HEAD

3.git reset --hard HEAD~2

4.git reset --hard commit-object


26.反悔reset
- git reset --hard ORIG_HEAD

27.檢視雲端的倉庫url
- git remote -v
- git remote add orign https://github.com/jstcasual/git-demo1.git

28.本地端推送遠端倉庫
	- 第一次遠端需要產生分支
		- git push origin -u master
		  (git push --set-upstream orign dev)
	- 第二次後直接push
		- git push  ( 註：master => master )
	- 強制更新
		- git push -f 	
git演練
- 切換分支至 master
	- git checkout master
- 將 dev 分支合併至 master
	- git merge dev
- 更新至雲端 master 分支
	- git push
- 刪除本地 dev 分支
	- git branch -D dev
	- git push --delete origin dev(遠端)

-使用到指令
(git checkout/log/branch/push/merge)


29.新增README.md 跟 .gitignore
	- README.md 使用markdown語法
		-專案說明文檔
	- .gitignore 
		- 忽略不被控管的檔案
			- 1.jpg
			- *.jpg
			- res/  (目錄)



30.遠端相關指令
	- 複製專案
		- git clone https://github.com/jstcasual/git-demo1
	- 下載方式
		- 進入網址直接下載(不包含.git)
	
	- git pull (從遠端更新到本地)

31.程式演練(git pull)
	- 公司電腦
		- 專案新增 command.txt
		- git add / git commit
	- 家電腦
		- 初始專案
			- git clone 專案路徑

		- 已存在專案 
			- gti pull










